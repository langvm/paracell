use std::str::FromStr;
use crate::parser::ast::*;

grammar;

// Composition syntax

pub AfterSplit<T, SPLIT>: T = SPLIT <e: T> => e;

pub List<T, SPLIT>: Vec<T> = <lead: T?> <succ: AfterSplit<T, SPLIT>> SPLIT+ => {
    match lead {
        None => Vec::new(),
        Some(lead) => {
            let mut elems = Vec::new();
            elems.push(lead);
            elems.push(succ);
            elems
        }
    }
};

// Basic elements

pub Ident: Ident = <ident: r"_+[a-zA-Z]+[a-zA-Z0-9]*"> => Ident{lit: ident.to_string()};

pub Nat: Nat = {
    "0" => Nat{val: Ok(0)},
    <lit: r"[1-9]+[0-9]*"> => Nat{val: u128::from_str(lit)},
    <lit: r"0x[0-9A-F]*"> => Nat{val: u128::from_str_radix(&lit[2..lit.len()], 16)},
    <lit: r"0[0-7]*"> => Nat{val: u128::from_str_radix(&lit[1..lit.len()], 8)},
    <lit: r"0b[0-1]*"> => Nat{val: u128::from_str_radix(&lit[2..lit.len()], 2)},
}

// Operators

pub UnaryOperator: UnaryOperator = {
    "~" => UnaryOperator::Invert,
}

pub BinaryOperator: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Mod,

    "and" => BinaryOperator::And,
    "or" => BinaryOperator::Or,
}

// Expressions

pub IdentExpr: IdentExpr = <ident: Ident> => IdentExpr{ident};

pub TupleExpr: TupleExpr = "(" <exprs: List<Expr, ",">> ")" => TupleExpr{exprs};

pub UnaryOperatorExpr: UnaryOperatorExpr = <op: UnaryOperator> <expr: Expr> => UnaryOperatorExpr{op, expr};

pub BinaryOperatorExpr: BinaryOperatorExpr = <left: Expr> <op: BinaryOperator> <right: Expr> => BinaryOperatorExpr{left, op, right};

pub ApplyExpr: ApplyExpr = <func: Expr> <params: TupleExpr> => ApplyExpr{func, params};

pub Expr: Expr = {
    <expr: UnaryOperatorExpr> => Expr::Unary(Box::from(expr)),
    <expr: BinaryOperatorExpr> => Expr::Binary(Box::from(expr)),
    <expr: TupleExpr> => Expr::Tuple(Box::from(expr)),
    <expr: IdentExpr> => Expr::Ident(Box::from(expr)),
    <expr: ApplyExpr> => Expr::Apply(Box::from(expr)),
    "(" <expr: Expr> ")" => expr,
}

// Types

pub Type: Type = {
    "Nat" => Type::Nat,
    <v: Ident> => Type::Ident(v),
};

// Declarations

pub LetDecl: LetDecl = "let" <ident: Ident> "=" <expr: Expr> => LetDecl{ident, expr};

pub VarDecl: VarDecl = "var" <ident: Ident> "=" <expr: Expr> => VarDecl{ident, expr};

pub FuncDecl: FuncDecl = <params: List<Type, ",">> <expr: Expr> => FuncDecl{params, expr};

pub ForeachStmt: ForeachStmt = "foreach" <ident: Ident> "in" <expr: Expr> => ForeachStmt{};
